{"version":3,"file":"unsafe-html.js","sourceRoot":"","sources":["../src/directives/unsafe-html.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAO,MAAM,gBAAgB,CAAC;AAEtE;;;;;;GAMG;AAEH,MAAM,cAAc,GAAG,IAAI,OAAO,EAAoB,CAAC;AAEvD,MAAM,CAAC,MAAM,UAAU,GAAG,SAAS,CAAC,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC,IAAU,EAAQ,EAAE;IACvE,IAAI,CAAC,CAAC,IAAI,YAAY,QAAQ,CAAC,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACjE;IACD,+BAA+B;IAC/B,MAAM,aAAa,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/C,IAAI,aAAa,KAAK,KAAK,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QACjD,OAAO;KACR;IAED,4CAA4C;IAC5C,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAC/C,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACtD,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {directive, isPrimitive, NodePart, Part} from '../lit-html.js';\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\n\nconst previousValues = new WeakMap<NodePart, string>();\n\nexport const unsafeHTML = directive((value: any) => (part: Part): void => {\n  if (!(part instanceof NodePart)) {\n    throw new Error('unsafeHTML can only be used in text bindings');\n  }\n  // Dirty check primitive values\n  const previousValue = previousValues.get(part);\n  if (previousValue === value && isPrimitive(value)) {\n    return;\n  }\n\n  // Use a <template> to parse HTML into Nodes\n  const tmp = document.createElement('template');\n  tmp.innerHTML = value;\n  part.setValue(document.importNode(tmp.content, true));\n  previousValues.set(part, value);\n});\n"]}